// db/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Prisma schema for EverMed - Glucose Tracking (Postgres/Supabase)

// Enums for Metabolic Insights feature
enum MealType {
  breakfast
  lunch
  dinner
  snack
}

enum AnalysisStatus {
  pending
  completed
  failed
}

enum IngredientSource {
  ai_detected
  manual_entry
  nutrition_api
}

enum GlucoseSource {
  cgm
  fingerstick
  lab
  interpolated
}

enum InsightType {
  daily_summary
  weekly_report
  pattern_detected
}

enum TierLevel {
  free
  premium
  family
}

model Person {
  id         String   @id @default(uuid())
  ownerId    String // supabase auth.uid()
  givenName  String?
  familyName String?
  birthYear  Int?
  sexAtBirth String?
  locale     String?  @default("de-DE")
  metadata   Json? // Extensible: { metabolic_onboarding_completed: true, ... }
  createdAt  DateTime @default(now())

  // Metabolic Insights preferences
  cgmConnected     Boolean @default(false) @map("cgm_connected")
  targetGlucoseMin Float?  @map("target_glucose_min")
  targetGlucoseMax Float?  @map("target_glucose_max")

  // Metabolic Insights relations
  foodEntries        FoodEntry[]
  glucoseReadings    GlucoseReading[]
  glucosePredictions GlucosePrediction[]
  personalModels     PersonalModel[] // Changed from singular to plural for multiple versions
  mealTemplates      MealTemplate[]
  metabolicInsights  MetabolicInsight[]
  subscription       SubscriptionTier?
}

model TokenUsage {
  id        String   @id @default(uuid())
  userId    String?
  feature   String // 'food_analysis'|'glucose_prediction'|'insight_generation'
  model     String
  tokensIn  Int
  tokensOut Int
  costUsd   Decimal? @db.Decimal(10, 5)
  createdAt DateTime @default(now())
}

// Non-PHI analytics events for product insights
model AnalyticsEvent {
  id        String   @id @default(uuid())
  eventType String // 'page_view', 'feature_usage', 'performance', 'error'
  eventName String // 'metabolic_dashboard', 'camera_capture', 'api_latency'
  metadata  Json? // Non-PHI data only: { endpoint, latency_ms, chart_type }
  sessionId String? // Hashed session ID for funnel analysis (no user identifiers)
  createdAt DateTime @default(now())

  @@index([eventType, eventName, createdAt])
  @@index([sessionId, createdAt])
  @@map("analytics_events")
}

// Feature flags for gradual rollout and A/B testing
model FeatureFlag {
  id             String   @id @default(uuid())
  name           String   @unique // e.g., 'metabolic_insights_enabled'
  enabled        Boolean  @default(false)
  rolloutPercent Int      @default(0) // 0-100: percentage of users who see this feature
  description    String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([name, enabled])
  @@map("feature_flags")
}

// ============================================
// Metabolic Insights Models (Premium Feature)
// ============================================

model FoodEntry {
  id                   String   @id @default(uuid())
  personId             String   @map("person_id")
  timestamp            DateTime
  mealType             MealType @map("meal_type")
  notes                String?
  predictedGlucosePeak Float?   @map("predicted_glucose_peak")
  actualGlucosePeak    Float?   @map("actual_glucose_peak")
  totalCalories        Float    @map("total_calories")
  totalCarbsG          Float    @map("total_carbs_g")
  totalProteinG        Float    @map("total_protein_g")
  totalFatG            Float    @map("total_fat_g")
  totalFiberG          Float    @map("total_fiber_g")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  person          Person              @relation(fields: [personId], references: [id], onDelete: Cascade)
  photos          FoodPhoto[]
  ingredients     FoodIngredient[]
  glucoseReadings GlucoseReading[]
  predictions     GlucosePrediction[]

  @@index([personId, timestamp])
  @@map("food_entries")
}

model FoodPhoto {
  id                  String         @id @default(uuid())
  foodEntryId         String         @map("food_entry_id")
  storagePath         String         @map("storage_path")
  thumbnailPath       String?        @map("thumbnail_path")
  originalSizeBytes   Int            @map("original_size_bytes")
  analysisStatus      AnalysisStatus @default(pending) @map("analysis_status")
  analysisCompletedAt DateTime?      @map("analysis_completed_at")
  createdAt           DateTime       @default(now()) @map("created_at")

  foodEntry FoodEntry @relation(fields: [foodEntryId], references: [id], onDelete: Cascade)

  @@map("food_photos")
}

model FoodIngredient {
  id              String           @id @default(uuid())
  foodEntryId     String           @map("food_entry_id")
  name            String
  quantity        Float
  unit            String
  confidenceScore Float            @map("confidence_score")
  calories        Float
  carbsG          Float            @map("carbs_g")
  proteinG        Float            @map("protein_g")
  fatG            Float            @map("fat_g")
  fiberG          Float            @map("fiber_g")
  source          IngredientSource
  createdAt       DateTime         @default(now()) @map("created_at")

  foodEntry FoodEntry @relation(fields: [foodEntryId], references: [id], onDelete: Cascade)

  @@map("food_ingredients")
}

model GlucoseReading {
  id          String        @id @default(uuid())
  personId    String        @map("person_id")
  timestamp   DateTime
  value       Float // mg/dL
  source      GlucoseSource
  deviceId    String?       @map("device_id")
  foodEntryId String?       @map("food_entry_id")
  confidence  Float?
  createdAt   DateTime      @default(now()) @map("created_at")

  person    Person     @relation(fields: [personId], references: [id], onDelete: Cascade)
  foodEntry FoodEntry? @relation(fields: [foodEntryId], references: [id], onDelete: SetNull)

  @@index([personId, timestamp])
  @@map("glucose_readings")
}

model GlucosePrediction {
  id                       String   @id @default(uuid())
  foodEntryId              String   @map("food_entry_id")
  personId                 String   @map("person_id")
  predictedPeakValue       Float    @map("predicted_peak_value")
  predictedPeakTimeMinutes Int      @map("predicted_peak_time_minutes")
  confidenceScore          Float    @map("confidence_score")
  modelVersion             String   @map("model_version")
  createdAt                DateTime @default(now()) @map("created_at")

  foodEntry FoodEntry @relation(fields: [foodEntryId], references: [id], onDelete: Cascade)
  person    Person    @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@map("glucose_predictions")
}

model PersonalModel {
  id        String  @id @default(uuid())
  personId  String  @map("person_id")
  modelType String  @map("model_type") // 'glucose-prediction', 'pattern-recognition'
  version   String // Semantic versioning: '1.0.0', '1.1.0'
  isActive  Boolean @default(false) @map("is_active")

  // Training metadata
  trainingMealsCount Int       @map("training_meals_count")
  trainingDataStart  DateTime  @map("training_data_start")
  trainingDataEnd    DateTime  @map("training_data_end")
  trainedAt          DateTime  @map("trained_at")
  lastUsedAt         DateTime? @map("last_used_at")

  // Model artifacts
  modelDataPath String? @map("model_data_path") // Supabase Storage path

  // Performance metrics
  accuracyMae  Float? @map("accuracy_mae") // Mean Absolute Error
  accuracyRmse Float? @map("accuracy_rmse") // Root Mean Squared Error
  accuracyR2   Float? @map("accuracy_r2") // RÂ² (coefficient of determination)

  // Extensible metadata for features, hyperparameters, etc.
  metadata Json? // { features: [...], hyperparameters: {...}, notes: "..." }

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([personId, modelType, version]) // Allow multiple versions per user per model type
  @@index([personId, modelType, isActive]) // Fast lookup for active models
  @@map("personal_models")
}

model MealTemplate {
  id              String   @id @default(uuid())
  personId        String   @map("person_id")
  name            String
  ingredients     Json
  nutritionTotals Json     @map("nutrition_totals")
  usageCount      Int      @default(0) @map("usage_count")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@map("meal_templates")
}

model MetabolicInsight {
  id          String      @id @default(uuid())
  personId    String      @map("person_id")
  date        DateTime    @db.Date
  insightType InsightType @map("insight_type")
  insightData Json        @map("insight_data")
  createdAt   DateTime    @default(now()) @map("created_at")

  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@index([personId, date])
  @@map("metabolic_insights")
}

model SubscriptionTier {
  id                   String    @id @default(uuid())
  personId             String    @unique @map("person_id")
  tier                 TierLevel
  mealsLimitPerWeek    Int       @map("meals_limit_per_week")
  mealsUsedThisWeek    Int       @default(0) @map("meals_used_this_week")
  weekStartDate        DateTime  @map("week_start_date") @db.Date
  stripeSubscriptionId String?   @map("stripe_subscription_id")
  expiresAt            DateTime? @map("expires_at")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@map("subscription_tiers")
}

// ============================================
// Admin Users (Role-Based Access Control)
// ============================================

model AdminUser {
  userId    String   @id @map("user_id") // References auth.users.id in Supabase
  email     String
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String?  @map("created_by")

  @@index([email])
  @@map("admin_users")
}
