name: Deploy to Vercel

on:
  push:
    branches: 
      - main
      - staging
      - development
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test-before-deploy:
    name: Run Tests Before Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Type check
        run: |
          cd frontend
          npm run type-check

      - name: Lint
        run: |
          cd frontend
          npm run lint

      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
        env:
          CI: true

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test-before-deploy
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://app.evermed.ai
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Deploy Project Artifacts to Vercel
        run: |
          vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
          echo "DEPLOYMENT_URL=$(cat deployment-url.txt)" >> $GITHUB_ENV
        working-directory: ./frontend

      - name: Comment on PR (if from PR)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Deployment Successful!**\n\n✅ Production: ${{ env.DEPLOYMENT_URL }}`
            })

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              task: 'deploy',
              auto_merge: false,
              required_contexts: [],
              payload: {
                web_url: '${{ env.DEPLOYMENT_URL }}'
              },
              environment: 'production',
              description: 'Deploying to production',
              production_environment: true
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              target_url: '${{ env.DEPLOYMENT_URL }}',
              description: 'Deployment successful'
            });

      - name: Send deployment notification
        run: |
          echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** ${{ env.DEPLOYMENT_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date)" >> $GITHUB_STEP_SUMMARY

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Deploy Preview to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Preview URL: $DEPLOYMENT_URL"
        working-directory: ./frontend

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `🔍 **Preview Deployment Ready!**
            
            🌐 Preview: ${{ steps.deploy.outputs.url }}
            📝 Commit: \`${{ github.event.pull_request.head.sha.substring(0, 7) }}\`
            
            This preview will be automatically updated with new commits.`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Preview Deployment Ready')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  lighthouse-check:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://app.evermed.ai
            https://app.evermed.ai/camera
            https://app.evermed.ai/history
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Format Lighthouse Score
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(
              fs.readFileSync('${{ github.workspace }}/.lighthouseci/manifest.json', 'utf8')
            );
            
            const summary = results.map(result => {
              const { url, summary } = result;
              const scores = {
                performance: Math.round(summary.performance * 100),
                accessibility: Math.round(summary.accessibility * 100),
                'best-practices': Math.round(summary['best-practices'] * 100),
                seo: Math.round(summary.seo * 100),
              };
              
              return { url, scores };
            });
            
            core.setOutput('summary', JSON.stringify(summary));

      - name: Add Lighthouse results to summary
        run: |
          echo "## 🏃 Lighthouse Performance Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.format_lighthouse_score.outputs.summary }}" | jq -r '.[] | 
            "### \(.url)\n" +
            "| Metric | Score |\n" +
            "|--------|-------|\n" +
            "| Performance | \(.scores.performance)% |\n" +
            "| Accessibility | \(.scores.accessibility)% |\n" +
            "| Best Practices | \(.scores["best-practices"])% |\n" +
            "| SEO | \(.scores.seo)% |\n"
          ' >> $GITHUB_STEP_SUMMARY